(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a="undefined"==typeof globalThis?a||self:globalThis,a.CS=b())})(this,function(){'use strict';class a{constructor(){this._listeners=new Map}on(a,b){if(!a||!b)return;const c=this._listeners.get(a),d=c&&c.push(b);d||this._listeners.set(a,[b])}off(a,b){if(a&&b){const c=this._listeners.get(a);c&&c.splice(c.indexOf(b)>>>0,1)}}emit(a,b){(this._listeners.get(a)||[]).slice().forEach(a=>{a(b)}),(this._listeners.get("*")||[]).slice().forEach(c=>{c(a,b)})}}const b=()=>Math.random().toString(36).substr(2),c="text",d={headers:{},wsMsgType:c,wsHeartBeatTime:1e4,withCredentials:!0};class e extends a{constructor(a,b){if(super(),"object"==typeof a&&(b=a,a=b.url),!a)throw new Error("cs initial must require url");this.url=a,this.options=Object.assign({},d,b||{}),this.sendTimeout=1e4,this._progress=new Map,this._init()}get adapterName(){return 0===this.url.indexOf("ws")?"ws":"http"}async resetUrl(a){this.destroy(),this.url=a,this._init()}destroy(){this.adapter&&(this.adapter.close(),this.adapter=null,this.wshb&&clearInterval(this.wshb),this.wshb=null)}async send(a,c){const d={cmd:a,data:c,seqno:b()};let e;if(e="ws"===this.adapterName?await this._sendByWs(d):await fetch(this.url,{method:"POST",headers:{"Content-Type":"application/json",...(this.options.headers||{})},body:JSON.stringify(d),credentials:this.options.withCredentials?"include":"omit"}).then(a=>a.json()),0!=e.code){const a=new Error(e.msg);throw a.response=e,a}return e.data}_init(){this.adapter&&this.destroy(),this.adapter="ws"===this.adapterName?this._initWs():this._initHttp(),this._events()}_initWs(){const a=new WebSocket(this.url);return a.addEventListener("close",()=>{this.wshb&&clearInterval(this.wshb),this.wshb=null}),this.wshb=setInterval(()=>{const b=this.options.wsMsgType=="blob"?new Blob([""],{type:"text/plain"}):"";a.send(b)},this.options.wsHeartBeatTime),a}_initHttp(){return!1===this.options.withCredentials&&console.warn("[CS]http adapter required Cookie to work fine, but you set withCredentials=false, Server-Send Event maybe invalid"),new EventSource(this.url,{headers:this.options.headers,withCredentials:this.options.withCredentials})}_events(){this.adapter.onopen=a=>{this.emit("cs.connected",a)},this.adapter.onclose=a=>{this.emit("cs.closed",a),"ws"===this.adapterName&&setTimeout(this._init.bind(this),100)},this.adapter.onmessage=this._onMessage.bind(this)}async _onMessage(a){let b=a.data;b instanceof Blob&&(b=await b.text());const c=JSON.parse(b);this.emit("cs.message",c);const{cmd:d,seqno:e,data:f}=c;this.emit(d,f);const g=this._progress.get(e);if(g){const[a]=g;a(c)}}_sendByWs(a){return new Promise((b,d)=>{const e=a.seqno,f=a=>{d(a),g()},g=()=>{clearTimeout(h),this._progress.delete(e)},h=setTimeout(()=>{f(new Error("websocket send wait timeout"))},this.sendTimeout);this._progress.set(e,[a=>{const{cmd:c,code:e,msg:f,data:h}=a;if(0!=e){const b=new Error(f);return b.response=a,void d(b)}b(a),g()}]);let i=JSON.stringify(a);this.options.wsMsgType!==c&&(i=new Blob([i],{type:"text/plain"})),this.adapter.send(i)})}}return e});